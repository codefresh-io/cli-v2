// Copyright 2023 The Codefresh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	git "github.com/argoproj-labs/argocd-autopilot/pkg/git"
	git0 "github.com/codefresh-io/cli-v2/pkg/git"
	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// BaseURL mocks base method.
func (m *MockProvider) BaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// BaseURL indicates an expected call of BaseURL.
func (mr *MockProviderMockRecorder) BaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseURL", reflect.TypeOf((*MockProvider)(nil).BaseURL))
}

// SupportsMarketplace mocks base method.
func (m *MockProvider) SupportsMarketplace() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsMarketplace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsMarketplace indicates an expected call of SupportsMarketplace.
func (mr *MockProviderMockRecorder) SupportsMarketplace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsMarketplace", reflect.TypeOf((*MockProvider)(nil).SupportsMarketplace))
}

// Type mocks base method.
func (m *MockProvider) Type() git0.ProviderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(git0.ProviderType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockProviderMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockProvider)(nil).Type))
}

// ValidateToken mocks base method.
func (m *MockProvider) ValidateToken(ctx context.Context, auth git.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockProviderMockRecorder) ValidateToken(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockProvider)(nil).ValidateToken), ctx, auth)
}

// VerifyRuntimeToken mocks base method.
func (m *MockProvider) VerifyRuntimeToken(ctx context.Context, auth git.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRuntimeToken", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyRuntimeToken indicates an expected call of VerifyRuntimeToken.
func (mr *MockProviderMockRecorder) VerifyRuntimeToken(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRuntimeToken", reflect.TypeOf((*MockProvider)(nil).VerifyRuntimeToken), ctx, auth)
}

// VerifyUserToken mocks base method.
func (m *MockProvider) VerifyUserToken(ctx context.Context, auth git.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserToken", ctx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserToken indicates an expected call of VerifyUserToken.
func (mr *MockProviderMockRecorder) VerifyUserToken(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserToken", reflect.TypeOf((*MockProvider)(nil).VerifyUserToken), ctx, auth)
}
