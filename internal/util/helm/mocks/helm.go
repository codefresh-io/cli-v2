// Code generated by MockGen. DO NOT EDIT.
// Source: ./helm.go

// Package helm is a generated GoMock package.
package helm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chartutil "helm.sh/helm/v3/pkg/chartutil"
)

// MockHelm is a mock of Helm interface.
type MockHelm struct {
	ctrl     *gomock.Controller
	recorder *MockHelmMockRecorder
}

// MockHelmMockRecorder is the mock recorder for MockHelm.
type MockHelmMockRecorder struct {
	mock *MockHelm
}

// NewMockHelm creates a new mock instance.
func NewMockHelm(ctrl *gomock.Controller) *MockHelm {
	mock := &MockHelm{ctrl: ctrl}
	mock.recorder = &MockHelmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelm) EXPECT() *MockHelmMockRecorder {
	return m.recorder
}

// GetDependency mocks base method.
func (m *MockHelm) GetDependency(name string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependency", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDependency indicates an expected call of GetDependency.
func (mr *MockHelmMockRecorder) GetDependency(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependency", reflect.TypeOf((*MockHelm)(nil).GetDependency), name)
}

// GetValues mocks base method.
func (m *MockHelm) GetValues(valuesFile string, loadFromChart bool) (chartutil.Values, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues", valuesFile, loadFromChart)
	ret0, _ := ret[0].(chartutil.Values)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues.
func (mr *MockHelmMockRecorder) GetValues(valuesFile, loadFromChart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockHelm)(nil).GetValues), valuesFile, loadFromChart)
}
