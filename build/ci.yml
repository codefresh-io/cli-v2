version: '1.0'
mode: parallel

stages: 
- Prepare
- Test
- Build
- Push Dev
- Release

steps:
  
  main_clone:
    stage: Prepare
    title: clone repository
    type: git-clone
    git: cf_github
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_BRANCH}}

  prepare_env_vars: &deps
    stage: Prepare
    title: prepare-env
    image: quay.io/codefresh/golang-ci-helper:latest
    commands:
    - cf_export GO111MODULE=on
    - cf_export GOCACHE=/codefresh/volume/gocache # change gopath to codefresh shared volume
    - cf_export GOPATH=/codefresh/volume/gopath
    - cf_export PATH=$PATH:/codefresh/volume/gopath/bin
    - cf_export LATEST_VERSION=$(curl --silent -H "Authorization:Bearer ${{GITHUB_TOKEN}}" "https://api.github.com/repos/codefresh-io/cli-v2/releases/latest" | jq -r ".tag_name")
    - cf_export VERSION=$(make cur-version)
    when:
      steps:
      - name: main_clone
        on:
        - success
  
  compare_versions: 
    stage: Prepare
    title: compare versions
    image: alpine/semver
    commands:
    - semver "${{VERSION}}" -r ">${{LATEST_VERSION}}" || (echo "bump version! current is ${{VERSION}} latest is ${{LATEST_VERSION}}" && exit 1)
    when:
      steps:
      - name: prepare_env_vars
        on:
        - success

  download_modules:
    <<: *deps
    stage: Prepare
    title: download modules
    commands:
    - go mod download -x
    - make clean
    when:
      steps:
      - name: compare_versions
        on:
        - success

  lint:
    <<: *deps
    stage: Test
    title: lint
    commands:
    - make lint
    - make check-worktree
    when:
      steps:
      - name: download_modules
        on:
        - success

  codegen:
    <<: *deps
    stage: Test
    title: check codegen
    commands:
    - make codegen
    - make check-worktree
    when:
      steps:
      - name: download_modules
        on:
        - success

  test:
    <<: *deps
    stage: Test
    title: run tests
    commands:
    - make test
    when:
      steps:
      - name: lint
        on:
        - success

  codecov-report:
    stage: Test
    type: codecov-reporter
    title: report code coverage
    arguments:
      codecov_integration: ${{CODECOV_INTEGRATION}}
    when:
      steps:
      - name: test
        on:
        - success
  
  build:
    stage: Build
    title: build docker image
    type: build
    image_name: ${{IMAGE_NAME}}
    tag: ${{CF_BRANCH_TAG_NORMALIZED}}
    buildkit: true
    disable_push: true
    when:
      steps:
      - name: compare_versions
        on:
        - success

  push_dev:
    stage: Push Dev
    title: push with dev tags
    type: push
    candidate: ${{build}}
    tags:
    - dev-${{CF_BRANCH_TAG_NORMALIZED}}
    when:
      steps:
      - name: build
        on:
        - success
      branch:
        ignore: [ "main" ]
    scale:
      push_quay_dev:
        title: push to quay
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"

  build_binaries:
    <<: *deps
    stage: Build
    title: build binaries
    commands:
    - make ./dist/cf-${TARGET}.sha256 DEV_MODE=false
    scale:
      linux_amd64:
        title: linux_amd64
        environment:
         - TARGET=linux-amd64
      linux_arm64:
        title: linux_arm64
        environment:
         - TARGET=linux-arm64
      linux_s390x:
        title: linux_s390x
        environment:
         - TARGET=linux-s390x
      linux_ppc64le:
        title: linux_ppc64le
        environment:
         - TARGET=linux-ppc64le
      windows_amd64:
        title: windows_amd64
        environment:
         - TARGET=windows-amd64
      darwin_amd64:
        title: darwin_amd64
        environment:
         - TARGET=darwin-amd64
    retry:
      maxAttempts: 3
      delay: 1
    when:
      branch:
        only: [ "main" ]
      steps:
      - name: test
        on:
        - success
      - name: codegen
        on:
        - success
      - name: lint
        on:
        - success
  
  create_release:
    <<: *deps
    stage: Release
    title: create github release
    commands:
    - export GIT_REPO=${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    - export GIT_BRANCH=${{CF_BRANCH}}
    - make release
    when:
      branch:
        only: [ "main" ]
      steps:
      - name: build_binaries
        on:
        - success
      - name: build
        on:
        - success
        
  push_prod:
    stage: Release
    title: promote image
    type: push
    candidate: ${{build}}
    tags:
    - latest
    - ${{VERSION}}
    when:
      steps:
      - name: create_release
        on:
        - success
      branch:
        only: [ "main" ]
    scale:
      push_quay:
        title: push to quay
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"
